<?php/** * Created by PhpStorm. * User: larrylluo * Date: 2016/8/23 * Time: 15:56// *///require_once('../../../../GatewayWorker/Lib/DbConnection.php');require_once('commonApp.php');ini_set("display_errors", "On");error_reporting(E_ALL | E_STRICT);class apiArtileEdit extends commonApp{    private  $db;    private $jsonInfo;    public function __construct()    {        $this->db = $this->connectDb();        $name = $_POST['jsonName'];        if(!file_exists('../json/'.$name.'.json')){            var_dump('json/'.$name.'.json');            $this->echoApi(1,'参数错误');        }        $jsonContent = file_get_contents('../json/'.$name.'.json');        $this->jsonInfo = json_decode($jsonContent,true);        $this->init();    }    private function init()    {        $this->initTable();    }    private function initTable()    {        $sql ="CREATE TABLE IF NOT EXISTS `{$this->jsonInfo['tb']}`(`Id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',";        foreach ($this->jsonInfo["items"] as $fieldInfo){            if($fieldInfo['type'] == 'pic'){                $sql = $sql ."`{$fieldInfo['name']}` varchar(256) NOT NULL COMMENT '{$fieldInfo['dsc']}',";            }            if($fieldInfo['type'] == 'text'){                $sql = $sql ."`{$fieldInfo['name']}` varchar(512) NOT NULL COMMENT '{$fieldInfo['dsc']}',";            }            if($fieldInfo['type'] == 'date'){                $sql = $sql ."`{$fieldInfo['name']}` date NOT NULL COMMENT '{$fieldInfo['dsc']}',";            }            if($fieldInfo['type'] == 'time'){                $sql = $sql ."`{$fieldInfo['name']}` datetime NOT NULL COMMENT '{$fieldInfo['dsc']}',";            }        }        $sql .= "  PRIMARY KEY (`Id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='字段管理表' AUTO_INCREMENT=1 ;";//        var_dump($sql);        $this->db->query($sql);    }    /*     * 添加新的内容     */    public function add(){        $insertArr = array();        foreach ($this->jsonInfo["items"] as $fieldInfo){            if($fieldInfo['type'] == 'pic'){                $filePath = $this->dealUpload($fieldInfo['name']);                $insertArr[$fieldInfo['name']] = $filePath;            }            else{                $insertArr[$fieldInfo['name']] = $_POST[$fieldInfo['name']];            }        }        $this->db->insert($this->jsonInfo['tb'])->cols($insertArr)->query();        $this->echoApi(0,'成功');    }    protected function dealUpload($fieldName)    {        $file = $_FILES[$fieldName];        if(!$file){            $this->echoApi(1,'参数错误，没有检测到要上传的文件');        }        if($file['error']){            $this->echoApi(2,'图片错误或者不存在，请重新上传');        }        if(!file_exists($file['tmp_name'])){            $this->echoApi(2,'图片错误或者不存在，请重新上传');        }        if(!is_uploaded_file($file['tmp_name'])){            $this->echoApi(2,'图片错误或者不存在，请重新上传');        }//		var_dump(2.1);        $config = require_once('inc/upload.inc.php');//		var_dump(2.2);//		$config = loadConfig('upload');        $fileName = $file['name'];        $fileSize = $file['size'];        $fileType = $this->getFileExt($fileName);        //文件存储路径        $filePath = $this->getFullPath($fileName);//		var_dump(2.3);//		$this->showAPIJson(-2,$filePath);        $rootPath = $_SERVER['DOCUMENT_ROOT'];        if(substr($rootPath,-1) == '/'){            $rootPath = substr($rootPath,0,-1);        }        //完整路径        $fullPath = $rootPath . $filePath;//		var_dump($fullPath);        $dir = dirname($fullPath);        if(!$this->checkFileSize($fileSize)){            $this->echoApi(2,'数据上传失败，文件过大');        }        if(!$this->checkFileType($fileType)){            $this->echoApi(2,'数据上传失败，文件类型不符合');        }        //创建目录失败        if (!file_exists($dir) && !mkdir($dir, 0777, true)) {            $this->echoApi(2,'数据上传失败，无法创建'.$dir.'目录');        }        if (!is_writeable($dir)) {            $this->echoApi(2,'数据上传失败，目录不可写');        }        if (!(move_uploaded_file($file["tmp_name"], $fullPath) && file_exists($fullPath))) { //移动失败            $this->echoApi(2,'数据上传失败，移动文件到'.$filePath.'失败');        }        return $filePath;    }    /* * 检查上传文件大小 */    protected function checkFileSize($size)    {        $config = require('inc/upload.inc.php');//        var_dump($size);//        var_dump($config["maxSize"]);        return $size <= $config["maxSize"];    }    /**     * 重命名文件     * @return string     */    protected function getFullPath($oriName)    {        $config = require('inc/upload.inc.php');        //替换日期事件        $t = time();        $d = explode('-', date("Y-y-m-d-H-i-s"));        $format = $config["commonPath"];        $format = str_replace("{yyyy}", $d[0], $format);        $format = str_replace("{yy}", $d[1], $format);        $format = str_replace("{mm}", $d[2], $format);        $format = str_replace("{dd}", $d[3], $format);        $format = str_replace("{hh}", $d[4], $format);        $format = str_replace("{ii}", $d[5], $format);        $format = str_replace("{ss}", $d[6], $format);        $format = str_replace("{time}", $t, $format);        //替换随机字符串        $randNum = rand(1, 10000000000) . rand(1, 10000000000);        if (preg_match("/\{rand\:([\d]*)\}/i", $format, $matches)) {            $format = preg_replace("/\{rand\:[\d]*\}/i", substr($randNum, 0, $matches[1]), $format);        }        $fileExt = $this->getFileExt($oriName);        //过滤文件名的非法自负,并替换文件名        $oriName = substr($oriName, 0, strrpos($oriName, '.'));        $oriName = preg_replace("/[\|\?\"\<\>\/\*\\\\]+/", '', $oriName);//		$format = str_replace("{filename}", $oriName, $format);        $fullname = $format . $fileExt;        if (substr($fullname, 0, 1) != '/') {            $fullname = '/' . $fullname;//			$fullname = substr($fullname, 1);        }        return $fullname;    }    /**     * 获取文件扩展名     * @return string     */    protected function getFileExt($oriName)    {//		$this->showAPIJson(-2, strtolower(strrchr($oriName, '.')));//		$this->showAPIJson(-2,$oriName);        $ext = strtolower(strrchr($oriName, '.'));//		$this->showAPIJson(-2,$ext);        return $ext;    }    /*	 * 检查上传文件类型	 */    protected function checkFileType($type)    {        $config = require('inc/upload.inc.php');        return in_array($type,$config['imageAllowFiles']);    }    /**     */    public function run()    {       $this->init();        $this->add();    }}$m = new apiArtileEdit();$m->run();